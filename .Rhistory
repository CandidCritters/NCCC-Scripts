t<-(max(ss$Date)-min(ss$Date))/60
(max(ss$Date)-min(ss$Date))/60
as.numeric(max(ss$Date))-min(ss$Date)))/60
as.numeric(max(ss$Date)-min(ss$Date))/60
t1<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
t2<-ss[ss$Date > (min(ss$Date)+60) & ss$Date <= (min(ss$Date)+120),]
t3<-ss[ss$Date > (min(ss$Date)+120) & ss$Date <= (min(ss$Date)+180),]
t4<-ss[ss$Date > (min(ss$Date)+180) & ss$Date <= (min(ss$Date)+240),]
t5<-ss[ss$Date > (min(ss$Date)+240) & ss$Date <= (min(ss$Date)+300),]
t5
t6
t7
t1$Block<-c("1")
t2$Block<-c("2")
t3$Block<-c("3")
t4$Block<-c("4")
t5$Block<-c("5")
t6$Block<-c("6")
df3<-as.data.frame(rbind(t1, t2, t3, t4, t5, t6
)
)
n<-(as.numeric(max(ss$Date)-min(ss$Date))/60)+1
n
n<-round(n, 0)
n
t1
t<-list()
for (i in n){
t[[i]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
}
t
names(t)
y<-rep(60, n)
y
?seq
y<-seq(from=60, to=(60*n)), by=60)
y<-seq(from=60, to=(60*n), by=60)
y
t<-list()
for (i in n){
t[[i]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+y[i]),]
}
t<-list()
for (i in n){
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
t[[i+1]]<-ss[ss$Date >= (min(ss$Date)+y[i]) & ss$Date <= (min(ss$Date)+y[i+1]),]
}
t
names(t)
t<-list()
for (i in n){
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
t[[i+1]]<-ss[ss$Date > (min(ss$Date)+y[i]) & ss$Date <= (min(ss$Date)+y[i+1]),]
}
names(t)
t
n
length(n)
t<-list()
for (i in n){
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
t[[i]]<-ss[ss$Date > (min(ss$Date)+y[i]) & ss$Date <= (min(ss$Date)+y[i+1]),]
}
t
for (i in (n-1)){
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
t[[i]]<-ss[ss$Date > (min(ss$Date)+y[i]) & ss$Date <= (min(ss$Date)+y[i+1]),]
}
t
names(t)
t[[1]]
t[[2]]
t[[3]]
t[[4]]
t[[5]]
t1
t2
t3
t4
t5
y
t<-list()
for (i in n){
t[[i]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+y[i]),]
}
t
t[[1]]
t[[2]]
t[[3]]
t[[4]]
t[[5]]
t[[6]]
t[[i]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+y[i]),]
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+y[1]),]
t[[1]]
t[[2]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+y[2]),]
t[[2]]
t
t<-list()
for (i in length(y)){
t[[i]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+y[i]),]
}
t
names(t)
t[[1]]
t[[2]]
t[[3]]
t[[4]]
t[[5]]
length(y)
t<-list()
for (i in 2:length(y)){
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
t[[i]]<-ss[ss$Date > (min(ss$Date)+y[i]) & ss$Date <= (min(ss$Date)+y[i+1]),]
}
t
t[[1]]
t[[2]]
t[[3]]
t[[4]]
t[[5]]
t[[6]]
summary(t[[1]]$Date)
summary(t[[2]]$Date)
summary(t2$Date)
ss[ss$Date > (min(ss$Date)+y[i]) & ss$Date <= (min(ss$Date)+y[i+1]),]
ss[ss$Date > (min(ss$Date)+y[1]) & ss$Date <= (min(ss$Date)+y[2]),]
y[1]
y[2]
t2<-ss[ss$Date > (min(ss$Date)+60) & ss$Date <= (min(ss$Date)+120),]
summary(t2$Date)
summary(t[[2]]$Date)
t<-list()
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
for (i in 2:length(y)){
t[[i]]<-ss[ss$Date > (min(ss$Date)+y[i]) & ss$Date <= (min(ss$Date)+y[i+1]),]
}
t
t[[2]]
summary(t[[2$Date]])
summary(t[[2]]$Date)
t[[2]]<-ss[ss$Date > (min(ss$Date)+y[1]) & ss$Date <= (min(ss$Date)+y[2]),]
summary(t[[2]]$Date)
t<-list()
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
for (i in 2:length(y)){
t[[i]]<-ss[ss$Date > (min(ss$Date)+y[i-1]) & ss$Date <= (min(ss$Date)+y[i]),]
}
summary(t[[2]]$Date)
summary(t[[3]]$Date)
summary(t3$Date)
summary(t4$Date)
summary(t[[4]]$Date)
t<-list()
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
t[[1]]$Block<-c("1")
for (i in 2:length(y)){
t[[i]]<-ss[ss$Date > (min(ss$Date)+y[i-1]) & ss$Date <= (min(ss$Date)+y[i]),]
t[[i]]$Block<-c(i)
}
t[[2]]
t[[3]]
t
df3 <- do.call("rbind", t)
df3
df3<-as.data.frame(df3)
df3
unique(df3$Common.Name)
species<-c("Coyote", "Grey Fox")
df.sp <- as.data.frame(subset(df3, Common.Name %in% species))
`%notin%` <- function(x,y) !(x %in% y)
cam<-subset(df3, !(Deployment.Name %in% df.sp$Deployment.Name))
cam$Count[cam$Count>0]  <- 0
cam$Common.Name[which(cam$Common.Name %notin% species)] <- NA
ss<-rbind(df.sp, cam)
ss
species2<-c("Coyote")
df.sp2 <- as.data.frame(subset(df3, Common.Name %in% species2))
png(filename="densityPlot.png")
densityPlot(df.sp2$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species2,
xlab = "Time", ylab = "Density")
df2<-as.data.frame(rbind(coastal.df, sandhills.df, mountains.df, piedmont.df))
############## Turn the time into radians for activity plots ######################
setDT(df2)[,paste0("Begin3",1:2):= tstrsplit(Begin," ")] #Splits the time stamp into Date and Time Columns
setnames(df2, old = c('Begin31','Begin32'), new = c('Date','Time')) #Renames the new columns
setDT(df2)[,paste0("Times",1:3):= tstrsplit(Time,":")]
df2$hours<-as.numeric(df2$Times1)
df2$mins<-as.numeric(df2$Times2)
df2$seconds<-as.numeric(df2$Times3)
df2$hours<-df2$hours * 60
df2$seconds<-df2$seconds / 60
df2$totalminutes<-df2$hours + df2$mins + df2$seconds
df2[,!c("Times1","Times2","Times3"), with=F]
df2$totalminutes2<-apply(df2, MARGIN=2,
FUN=function(x) (df2$totalminutes-min(df2$totalminutes))/diff(range(df3$totalminutes)))
df2$radians <- df2$totalminutes2 * 2 * pi  #This turns total minutes into radians
df2$radians
ss<-df2
#First find the min and max of the study
min(ss$Date)
max(ss$Date)
#Set the number of 2 month intervals in the study period
n<-(as.numeric(max(ss$Date)-min(ss$Date))/60)+1
n<-round(n, 0)
y<-seq(from=60, to=(60*n), by=60)
#Split the data into those 2 month periods and mark each period in a column
#called "Block"
t<-list()
t[[1]]<-ss[ss$Date >= min(ss$Date) & ss$Date <= (min(ss$Date)+60),]
t[[1]]$Block<-c("1")
for (i in 2:length(y)){
t[[i]]<-ss[ss$Date > (min(ss$Date)+y[i-1]) & ss$Date <= (min(ss$Date)+y[i]),]
t[[i]]$Block<-c(i)
}
#Recombine the list into a data frame
df3 <- do.call("rbind", t)
df3<-as.data.frame(df3)
unique(df3$Common.Name)
species<-c("Coyote", "Grey Fox")
df.sp <- as.data.frame(subset(df3, Common.Name %in% species))
`%notin%` <- function(x,y) !(x %in% y)
cam<-subset(df3, !(Deployment.Name %in% df.sp$Deployment.Name))
cam$Count[cam$Count>0]  <- 0
cam$Common.Name[which(cam$Common.Name %notin% species)] <- NA
ss<-rbind(df.sp, cam)
species2<-c("Coyote")
df.sp2 <- as.data.frame(subset(df3, Common.Name %in% species2))
png(filename="densityPlot.png")
densityPlot(df.sp2$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species2,
xlab = "Time", ylab = "Density")
species3<-c("Grey Fox")
df.sp3 <- as.data.frame(subset(df3, Common.Name %in% species3))
densityPlot(df.sp3$radians, add = TRUE, col = 'blue')
legend ('bottomleft', c(species2,species3), lty = 1, col = c('black','blue'), bg = 'white')
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3, col='grey')
dev.off()
densityPlot(df.sp2$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species2,
xlab = "Time", ylab = "Density")
dev.off()
densityPlot(df.sp2$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species2,
xlab = "Time", ylab = "Density")
densityPlot(df.sp2$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species2,
xlab = "Time", ylab = "Density")
dev.off()
densityPlot(df.sp2$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species2,
xlab = "Time", ylab = "Density")
species3<-c("Grey Fox")
df.sp3 <- as.data.frame(subset(df3, Common.Name %in% species3))
densityPlot(df.sp3$radians, add = TRUE, col = 'blue')
legend ('bottomleft', c(species2,species3), lty = 1, col = c('black','blue'), bg = 'white')
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3, col='grey')
dev.off()
dev.off()
overlapPlot (Deer$radians, Coyote$radians, main = "Deer and Coyote Activity Pattern Overlap")
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3)
legend ('top',c("Deer","Coyote"), lty = c(1,2), col = c(1,4), bty = 'n')
spp<-rbind(df.sp2, df.sp3)
overlapPlot (df.sp2$radians, df.sp3$radians,
main = paste(species2, "and", species3, "Activity Pattern Overlap",
sep=" "))
overlapPlot (df.sp2$radians, df.sp3$radians,
main = paste(species2, "and", species3, "\nActivity Pattern Overlap",
sep=" "))
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3)
legend ('top',c("Deer","Coyote"), lty = c(1,2), col = c(1,4), bty = 'n')
legend ('top',c(species2, species3), lty = c(1,2), col = c(1,4), bty = 'n')
overlapPlot (df.sp2$radians, df.sp3$radians,
main = paste(species2, "and", species3, "\nActivity Pattern Overlap",
sep=" "))
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3)
legend ('top',c(species2, species3), lty = c(1,2), col = c(1,4), bty = 'n')
dev.copy(jpeg,filename="temporaloverlapmap.jpg");
dev.off ()
D.hat.estimates <-overlapEst(df.sp2$radians, df.sp3$radians)
D.hat.estimates
overlapEst
?df.sp2$radians, df.sp3$radians
?overlapEst
D.hat.estimates <-overlapEst(df.sp2$radians, df.sp3$radians, type=c("Dhat1"))
D.hat.estimates
overlapEst(df.sp2$radians, df.sp3$radians, type=c("Dhat1"))
overlapEst(df.sp2$radians, df.sp3$radians, type=c("Dhat1", "Dhat4"))
overlapEst(df.sp2$radians, df.sp3$radians, type=c("Dhat1", "Dhat4"))
overlapEst(df.sp2$radians, df.sp3$radians, type=c("Dhat1"))
overlapEst(df.sp2$radians, df.sp3$radians, type=c("Dhat4"))
fdeer <- fitact (species2$radians, reps = 1000)
install.packages("activity")
library(activity)
fdeer <- fitact (species2$radians, reps = 1000)
fdeer <- fitact (df.sp2$radians, reps = 1000)
compareTimes(fdeer, c(5.5,6, 0.5, 1))
fspp2 <- fitact (df.sp2$radians, reps = 1000)
dd<-as.data.frame(rbind(df.sp2, df.sp3))
unique(dd$Common.Name)
names(dd)
?densityPlot
t
tt<-split(dd, dd$Block)
tt
names(tt)
tt2<-split(df.sp2, df.sp2$Block)
tt3<-split(df.sp3, df.sp3$Block)
tt3
species1<-c("Coyote")
species2<-c("Grey Fox")
df.sp1 <- as.data.frame(subset(df3, Common.Name %in% species1))
df.sp2 <- as.data.frame(subset(df3, Common.Name %in% species2))
tt1<-split(df.sp1, df.sp1$Block)
tt2<-split(df.sp2, df.sp2$Block)
dp<-list()
tt2[[1]]
tt2[[1]]$radians
for (i in names(tt1)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species1,
xlab = "Time", ylab = "Density")
#dev.copy(jpeg,filename="densityPlot.jpg");
#dev.off ()
}
for (i in names(tt1)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species1,
xlab = "Time", ylab = "Density")
#dev.copy(jpeg,filename="densityPlot.jpg");
#dev.off ()
}
dp_sp1<-list()
for (i in names(tt1)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= species1,
xlab = "Time", ylab = "Density")
#dev.copy(jpeg,filename="densityPlot.jpg");
#dev.off ()
}
for (i in names(tt1)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species1, i, sep=" "),
xlab = "Time", ylab = "Density")
#dev.copy(jpeg,filename="densityPlot.jpg");
#dev.off ()
}
for (i in names(tt1)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species1, i, sep=" "),
xlab = "Time", ylab = "Density")
dev.copy(jpeg,filename=paste(species1, i,"_densityPlot.jpg", sep=""))
dev.off ()
}
for (i in names(tt2)){
dp_sp2[[i]]<-densityPlot(tt2[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species2, i, sep=" "),
xlab = "Time", ylab = "Density")
dev.copy(jpeg,filename=paste(species2, i,"_densityPlot.jpg", sep=""))
dev.off ()
}
for (i in names(tt2)){
dp_sp2[[i]]<-densityPlot(tt2[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species2, i, sep=" "),
xlab = "Time", ylab = "Density")
dev.copy(jpeg,filename=paste(species2, i,"_densityPlot.jpg", sep=""))
dev.off ()
}
dp_sp2<-list()
for (i in names(tt2)){
dp_sp2[[i]]<-densityPlot(tt2[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species2, i, sep=" "),
xlab = "Time", ylab = "Density")
dev.copy(jpeg,filename=paste(species2, i,"_densityPlot.jpg", sep=""))
dev.off ()
}
for (i in names(tt1)){
for (j in names(tt2)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species1, i, sep=" "),
xlab = "Time", ylab = "Density")
dev.copy(jpeg,filename=paste(species1, i,"_densityPlot.jpg", sep=""))
dev.off ()
dp_sp2[[i]]<-densityPlot(tt2[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species2, i, sep=" "),
xlab = "Time", ylab = "Density")
dev.copy(jpeg,filename=paste(species2, i,"_densityPlot.jpg", sep=""))
dev.off ()
}
}
for (i in names(tt1)){
for (j in names(tt2)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species1, i, sep=" "),
xlab = "Time", ylab = "Density")
densityPlot(tt2[[i]]$radians, add = TRUE, col = 'blue')
legend ('bottomleft', c(species1,species2), lty = 1, col = c('black','blue'), bg = 'white')
dev.copy(jpeg,filename=paste(species2, i,"_densityPlot.jpg", sep=""))
#to draw lines indicating certain areas of time on the plot
#the set numbers shows crepescular periods
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3, col='grey')
dev.off ()
}
}
for (i in names(tt1)){
for (j in names(tt2)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species1, i, sep=" "),
xlab = "Time", ylab = "Density")
densityPlot(tt2[[i]]$radians, add = TRUE, col = 'blue')
legend ('bottomleft', c(species1,species2), lty = 1, col = c('black','blue'), bg = 'white')
dev.copy(jpeg,filename=paste(species1, species2, i,"_densityPlot.jpg", sep=""))
#to draw lines indicating certain areas of time on the plot
#the set numbers shows crepescular periods
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3, col='grey')
dev.off ()
}
}
for (i in names(tt1)){
for (j in names(tt2)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste("Two month period:", i, sep=" "),
xlab = "Time", ylab = "Density")
densityPlot(tt2[[i]]$radians, add = TRUE, col = 'blue')
legend ('bottomleft', c(species1,species2), lty = 1, col = c('black','blue'), bg = 'white')
dev.copy(jpeg,filename=paste(species1, species2, i,"_densityPlot.jpg", sep=""))
#to draw lines indicating certain areas of time on the plot
#the set numbers shows crepescular periods
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3, col='grey')
dev.off ()
}
}
tt1[[1]]
names(tt1[[1]])
for (i in names(tt1)){
for (j in names(tt2)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species1, min(tt1[[i]]$Date), "-", max(tt1[[i]]$Date), sep=" "),
xlab = "Time", ylab = "Density")
dev.copy(jpeg,filename=paste(species1, i,"_densityPlot.jpg", sep=""))
dev.off ()
dp_sp2[[i]]<-densityPlot(tt2[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(species2, min(tt2[[i]]$Date), "-", max(tt2[[i]]$Date), sep=" "),
xlab = "Time", ylab = "Density")
dev.copy(jpeg,filename=paste(species2, i,"_densityPlot.jpg", sep=""))
dev.off ()
}
}
for (i in names(tt1)){
for (j in names(tt2)){
dp_sp1[[i]]<-densityPlot(tt1[[i]]$radians, xscale = 24, xcenter = "noon", add = FALSE, rug = FALSE,
extend = NULL, n.grid = 100, adjust = 0.2, main= paste(min(tt2[[i]]$Date), "-", max(tt2[[i]]$Date), sep=" "),
xlab = "Time", ylab = "Density")
densityPlot(tt2[[i]]$radians, add = TRUE, col = 'blue')
legend ('bottomleft', c(species1,species2), lty = 1, col = c('black','blue'), bg = 'white')
dev.copy(jpeg,filename=paste(species1, species2, i,"_densityPlot.jpg", sep=""))
#to draw lines indicating certain areas of time on the plot
#the set numbers shows crepescular periods
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3, col='grey')
dev.off ()
}
}
ol_plt<-list()
ol_est<-list()
for (i in names(tt1)){
for (j in names(tt2)){
ol_plt[[i]]<-overlapPlot (tt1[[i]]$radians, tt2[[i]]$radians,
main = paste(species1, "and", species2, "\nActivity Pattern Overlap\n",
min(tt2[[i]]$Date), "-", max(tt2[[i]]$Date), sep=" "))
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3)
legend ('top',c(species1, species2), lty = c(1,2), col = c(1,4), bty = 'n')
dev.copy(jpeg,filename=paste(species1, species2, i, "_temporaloverlap.jpg", sep=""));
dev.off ()
#Calculates estimated activity pattern overlap (%) based on times of observation
#for 2 species
ol_est[[i]]<-overlapEst(tt1[[i]]$radians, tt2[[i]]$radians, type=c("Dhat1"))
}
}
ol_est
ol_est<-rep(NA, names(tt1))
ol_est<-rep(NA, length(names(tt1)))
for (i in names(tt1)){
for (j in names(tt2)){
ol_plt[[i]]<-overlapPlot (tt1[[i]]$radians, tt2[[i]]$radians,
main = paste(species1, "and", species2, "\nActivity Pattern Overlap\n",
min(tt2[[i]]$Date), "-", max(tt2[[i]]$Date), sep=" "))
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3)
legend ('top',c(species1, species2), lty = c(1,2), col = c(1,4), bty = 'n')
dev.copy(jpeg,filename=paste(species1, species2, i, "_temporaloverlap.jpg", sep=""));
dev.off ()
#Calculates estimated activity pattern overlap (%) based on times of observation
#for 2 species
ol_est[i]<-overlapEst(tt1[[i]]$radians, tt2[[i]]$radians, type=c("Dhat1"))
}
}
ol_est
ol_est<-NA
for (i in names(tt1)){
for (j in names(tt2)){
ol_plt[[i]]<-overlapPlot (tt1[[i]]$radians, tt2[[i]]$radians,
main = paste(species1, "and", species2, "\nActivity Pattern Overlap\n",
min(tt2[[i]]$Date), "-", max(tt2[[i]]$Date), sep=" "))
abline (v = c(4.5, 7.0, (17+0/60), (20+0/60)), lty = 3)
legend ('top',c(species1, species2), lty = c(1,2), col = c(1,4), bty = 'n')
dev.copy(jpeg,filename=paste(species1, species2, i, "_temporaloverlap.jpg", sep=""));
dev.off ()
#Calculates estimated activity pattern overlap (%) based on times of observation
#for 2 species
ol_est[i]<-overlapEst(tt1[[i]]$radians, tt2[[i]]$radians, type=c("Dhat1"))
}
}
ol_est
